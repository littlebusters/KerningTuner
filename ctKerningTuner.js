jQuery(document).ready(function (){	ctKerningTuner.init(); // 初期化	var defaultValue = ctKerningTuner.getDefault(); // カーニング値のデフォルトを設定	var prevValue = 0;		// input要素のfocusとblurのチェック	var inputFlag = false;	var $pairValue   = $('#pair_value');	var $tuningValue = $('#tuning_value');	var $tunedValue  = $('#tuned_value');		// 文字ペア入力部分	$pairValue.focus(function() {		$(this).next().stop();		$(this).next().fadeTo('500', 1);		inputFlag = true;	});	$pairValue.blur(function() {		$(this).next().fadeTo('500', 0);		inputFlag = false;	});	$pairValue.change(function() {		$tunedValue.focus();		ctKerningTuner.setLetterPair();		ctKerningTuner.saveCookie('reload');	});		// カーニング増減値入力部分	$tuningValue.focus(function() {		inputFlag = true;	});	$tuningValue.blur(function() {		inputFlag = false;	});	$tuningValue.change(function() {		if( ! isNaN( Number( ctKerningTuner.getDefault() ) ) ) {			defaultValue = ctKerningTuner.getDefault();			$tunedValue.focus();		} else {			alert('す…数字以外を…\n半角数字以外を入力できたほうが…\nほ…ほんとに…\nい…いいというのか？\n\nだ　が　断　る');			$tuningValue.val( defaultValue );			$tuningValue.focus();		}	});		// カーニング部分	$tunedValue.focus(function() {		$('#kerning_guide').stop();		$('#kerning_guide').fadeTo('500', 1);	});	$tunedValue.blur(function() {		$('#kerning_guide').fadeTo('500', 0);	});		// 左右の矢印キーがdownの時、カーニングを適用	// enterキー（13）で、調整後リスト項目を生成する。	$(window).keydown(function(e) {		if( 37 == e.keyCode && !inputFlag ) {			valCheck();			$("#tuned_value").val( $("#tuned_value").val() - defaultValue );			prevValue = $("#tuned_value").val();			ctKerningTuner.applyKerning();		} else if( 39 == e.keyCode && !inputFlag ) {			valCheck();			$("#tuned_value").val( $("#tuned_value").val() - 0 + defaultValue );			prevValue = $("#tuned_value").val();			ctKerningTuner.applyKerning();		} else if( 13 == e.keyCode && !inputFlag ) {			if( ! isNaN( Number( $('#tuned_value').val() ) ) ) {				ctKerningTuner.saveCookie();				ctKerningTuner.addTunedList( ctKerningTuner.kerningInfo );				$('#export textarea').text( ctKerningTuner.exportObject(ctKerningTuner.kerningInfo) );				$pairValue.focus();			} else {				alert('君がッ\n\n有効な値を入力するまで\n\nアラートを出すのをやめないッ！');				$tunedValue.val(prevValue);			}			return false;		}	});	function valCheck() {		if( isNaN( Number( $('#tuned_value').val() ) ) ) {			$tunedValue.val(prevValue);		}	}		// カーニングペア情報を String として書き出されている textarea 要素の表示/非表示	$('div#export label').click(function() {		$('textarea#export_object').toggleClass('hidden');	});			// フォントリストの処理	$('ul.font_list li').click(function() {		// クリック時にCSSクラスの切替で展開/収縮		$(this).parent(0).toggleClass('selecting');				var i;		var applyClass = 'empty';		var hasClasses = $(this).attr('class');		var classList = hasClasses.split(' ');				for(i = 0; i < classList.length; i++) {			// font-familyが設定されたクラスを抽出			if('font_name' != classList[i] && $(this).index(0)) applyClass = classList[i];		}		if( $(this).hasClass('selected') ) {			$(this).removeClass('selected');		} else {			$(this).addClass('selected');			// リストにWebフォントを適用しないために付加している"_"を除いて値を保存			if('empty' != applyClass) $('#font_family').val( applyClass.slice( 0, applyClass.length - 1 ) );			ctKerningTuner.saveCookie('reload');		}	});});var ctKerningTuner = {}ctKerningTuner.kerningInfo = {};/* * 初期化っぽいヤツ */ctKerningTuner.init = function() {	$("#tuned_value").attr( {value: 0} );	$('#pair_value').focus();	ctKerningTuner.loadCookie();}/* * 入力されているカーニング増減値を返す。 */ctKerningTuner.getDefault = function(){	return $("#tuning_value").val() - 0; //数値で返すため0で減算}/* + 入力されている値を初期化し、入力された文字ペアを ctKerningTuner.setPair へ渡す。 */ctKerningTuner.setLetterPair = function(){	$('#pair_before').removeAttr('style');	$('#tuned_value').val(0);		ctKerningTuner.setPair( $('#pair_value').val() );	$('#pair_value').val('');}/* * 渡された String（文字ペア）を要素に挿入。 * * @param {String} pair カーニングする文字ペア（1〜2文字） */ctKerningTuner.setPair = function(pair){	if( 3 > pair.length ) {		$('#pair_before').text( pair.substring(0, 1) );		$('#tuned_value').focus();	}	2 == pair.length ? $('#pair_after').text( pair.substring(1, 2) ) : $('#pair_after').text('');}/* * カーニングを適用する。 * 要素のstyle属性として、2文字ならletter-spacing、1文字ならmargin-leftを付与する。 * * @param {String} fontFamily CSSクラスを格納した文字列。 */ctKerningTuner.applyKerning = function(){	if( 1 == $('#pair_after').text().length ) {		$('#pair_before').css( { letterSpacing: $("#tuned_value").val() / 1000 + 'em' } );	} else {		$('#pair_before').css( { marginLeft: $("#tuned_value").val() / 1000 + 'em' } );	}}/* * 設定されている値を cookie へ書き込みする。 * * @param {String} mode 画面リロードが有無を判定するための文字列。'reload'で画面リロードを実行。 */ctKerningTuner.saveCookie = function(mode){		ctKerningTuner.kerningInfo[ $('#kerning_pair').text() ] = Number( $('#tuned_value').val() ) / 1000;		document.cookie = 'kerningInfo='+ escape( ctKerningTuner.exportObject( ctKerningTuner.kerningInfo ) );	document.cookie = 'fontFamily=' + escape( $('#font_family').val() );	document.cookie = 'letterPair=' + escape( $('#kerning_pair').text() );	document.cookie = 'tuningVal='  + escape( $('#tuning_value').val() );	document.cookie = 'tunedVal='   + escape( $('#tuned_value').val() );	//console.log('--saveCookie: ', document.cookie);		if( 'reload' == mode ) window.location.reload();}/* * cookieを取得して値を生成、それぞれの要素へ適用する。 */ctKerningTuner.loadCookie = function(){	var cookie = document.cookie.split('; ');	console.log('cookie = ', cookie);		if(cookie != ''){		var kerningInfo = new Object();		var fontFamily = $('#font_family').val();		var letterPair = '';		var tuningVal = 10;		var tunedVal = 0;				// cookieから値を生成		for(var i = 0; i < cookie.length; i++) {			var tmp = cookie[i].split('=');			tmp[1] = unescape(tmp[1]);						switch(tmp[0]) {				case 'kerningInfo':					ctKerningTuner.kerningInfo = eval( '(' + tmp[1] + ')' );					break;				case 'fontFamily':					fontFamily = tmp[1];					break;				case 'letterPair':					letterPair = tmp[1];					break;				case 'tuningVal':					tuningVal = tmp[1] - 0;					break;				case 'tunedVal':					tunedVal = tmp[1] - 0;					break;				default:					// console.log('default');					break;			}		}		console.log('--loadCookie: ', ctKerningTuner.kerningInfo, fontFamily, letterPair, tuningVal, tunedVal);				// cookieから取り出した値を、それぞれの要素に適用		ctKerningTuner.setPair(letterPair);		$('#kerning_pair').addClass(fontFamily);		$('ul.font_list').find('.selected').removeClass('selected');		$('ul.font_list').find('.' + fontFamily + '_').addClass('selected');		$('#tuning_value').val(tuningVal)		$("#tuned_value").attr( { value: tunedVal } );		ctKerningTuner.applyKerning();		ctKerningTuner.addTunedList( ctKerningTuner.kerningInfo );		$('#export textarea').text( ctKerningTuner.exportObject(ctKerningTuner.kerningInfo) );	}}/* * カーニングペア情報をli要素として生成し、ul要素へ挿入。 * "x"クリック時の要素及び ctKerningTuner.kerningInfo プロパティの削除。 * * @param {Object} kerningInfo カーニングペア情報を格納したオブジェクト。 */ctKerningTuner.addTunedList = function(kerningInfo){	// 要素を生成し、リスト項目を追加	$('#kerning_set').empty();	for( pairInfo in kerningInfo ) {		if( 0 != kerningInfo[pairInfo] ) {			var $fixedData = $('<li/>'); 			var $removeBtn = $('<span/>').addClass('rm').text('x');			var $pair = $('<span/>').addClass('pair').text(pairInfo);			var $fixedValue = $('<span/>').addClass('fixed_value').text( ( Number( kerningInfo[pairInfo] ) * 1000 ) + '/1000em' );			$fixedData.append($removeBtn).append($pair).append($fixedValue);					$('#kerning_set').append($fixedData);		} else {			delete kerningInfo[pairInfo];		}	}		// "x"クリック時の処理	$('li span.rm').click(function() {		delete ctKerningTuner.kerningInfo[ $(this).next().text() ];		$(this).parent('li').remove();		$('#export textarea').text( ctKerningTuner.exportObject( ctKerningTuner.kerningInfo ) );	});}/* * 渡された Object（カーニングペア情報）を String として生成し返す。 * * @param {Object} kerningInfo カーニングペア情報を格納したオブジェクト。 */ctKerningTuner.exportObject = function(kerningInfo){	var exportString = '{';	for( var obj in kerningInfo ) {		if( 0 != kerningInfo[obj] ) {			exportString += '"' + obj + '"' + ':' + kerningInfo[obj] + ',';		} else {			delete kerningInfo[obj];		}	}	if( '{' != exportString ) exportString = exportString.substring( 0, exportString.length - 1 ); // 最後のカンマを削除	exportString += '}';		return exportString;}